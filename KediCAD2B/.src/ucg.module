' Gambas module file

Public snx As Float
Public sny As Float

Public tmk As Integer
Public cazgi As Czm
Public earCounter As Integer
Public tribool As Boolean
Public earbool As Boolean
Public arebool As Boolean
Public conbool As Boolean
Public earHasBeenCut As Boolean
Public ccw As Boolean
Public concaveCount As Integer
Public npoints As Integer
Public idpoints As New Integer[]
Public xpoints As New Float[]
Public ypoints As New Float[]
Public z1points As New Float[]
Public z2points As New Float[]
Public ptType As New Float[]
Public depo As New Integer[]
Public areasum As Float
Public nokx As New Integer[]
Public noky As New Integer[]
Public hk As Integer
Public hkx As Integer
Public hky As Integer
Public rk As Integer
Public rkx As Integer
Public rky As Integer
Public tex As New Float[]
Public tey As New Float[]
Public tez1 As New Float[]
Public tez2 As New Float[]
Public az1 As New Float[]
Public az2 As New Float[]
Public xcz As Integer
Public yus As Float
Public ysa As Integer
Public atel As New Integer[]
Public alan As New Integer[]
Public basy As Float
Public sony As Float
Public basx As Float
Public sonx As Float
Public r2 As Integer
Public birx As Float
Public biry As Float
Public ikix As Float
Public ikiy As Float
Public blk As String
Public renk As Integer
Public kal As Integer
Public sek As Integer
Public jet As Integer
Public ax1 As New Float[]
Public ay1 As New Float[]
Public ax2 As New Float[]
Public ay2 As New Float[]
Public ax3 As New Float[]
Public ay3 As New Float[]
Public axid As New Float[]
Public xid As New Float[]
Public zo As Float
Public zi As Float


Public Sub ucgtem()
    
      tex.Clear
    tey.Clear
    hk = 0
    hkx = 0
    hky = 0
    rk = 0
    rkx = 0
    rky = 0
    earCounter = 0
    concaveCount = 0

    snx = 0
    sny = 0
    tmk = 0
    earCounter = 0
    concaveCount = 0
    npoints = 0
    areasum = 0
    hk = 0
    hkx = 0
    hky = 0
    rk = 0
    rkx = 0
    rky = 0
    birx = 0
    biry = 0
    ikix = 0
    ikiy = 0
    kal = 0
    sek = 0
    jet = 0
    idpoints.Clear
    xpoints.Clear
    ypoints.Clear
    ptType.Clear
    depo.Clear
    tex.Clear
    tey.Clear
    ax1.Clear
    ay1.Clear
    ax2.Clear
    ay2.Clear
    ax3.Clear
    ay3.Clear
    axid.Clear
    xid.Clear  
       Catch
	ilk.hatayaz("ucgtem " & Error.Text, Error.Where & "--" & Error.code)
End

Public Sub bas()
 Dim brx, bry, ikx, iky, usx, usy As Float
    Dim t, i As Integer
    Dim jetk As Long

    ucgtem
    duz.duzen
    For Each cazgi In ilk.cezmi    ' enküçük x ve y yi buluyoruz.
        If ilk.depo1.Exist(cazgi.id)
            If cazgi.komut = 1
                zo = cazgi.z
                zi = cazgi.z1
                ax1.Add(Round(cazgi.x1 * ilk.olcum, -1))
                ay1.Add(Round(cazgi.y1 * ilk.olcum, -1))
                ax2.Add(Round(cazgi.x2 * ilk.olcum, -1))
                ay2.Add(Round(cazgi.y2 * ilk.olcum, -1))
                blk = cazgi.blok
                renk = cazgi.renk
                kal = cazgi.kalinlik
                sek = cazgi.sekil
            Else If cazgi.komut = 20
                icle.bol(cazgi.teta, cazgi.r, cazgi.yaricap * ilk.olcum, cazgi.x1 * ilk.olcum, cazgi.y1 * ilk.olcum)
            Else If cazgi.komut = 25
                Goto cik
            End If
        End If
    Next
    If blk = 0 Or blk = ""
    Else
        blk = ilk.bolok + 5
        ilk.bolok = ilk.bolok + 10
    End If

    xpoints.Add(ax1[0])
    ypoints.Add(ay1[0])
    xpoints.Add(ax2[0])
    ypoints.Add(ay2[0])
    birx = ax1[0]
    biry = ay1[0]
    ikix = ax2[0]
    ikiy = ay2[0]
    ax1.Remove(0)
    ay1.Remove(0)
    ax2.Remove(0)
    ay2.Remove(0)
bas3:
    If Abs(ikix - birx) < 2 And Abs(ikiy - biry) < 2 Then
        altr(ikix, ikiy)
        Goto atla
    Else
        jetk = jet
        altr(ikix, ikiy)
        If jetk = jet Then
            secend(ikix, ikiy)
            Goto atla
        Endif
        Goto bas3
    Endif
atla:
    ilk.ListBox8.Clear
    npoints = xpoints.Count
    For t = 0 To npoints
        ptType.Clear
        classifyPoints()
        doCutEar()
    Next
cik:
Message(tex.Count)
If ilk.komutsayi = 27
    For i = 0 To (tex.Count - 3) Step 3
        brx = tex[i]
        bry = tey[i]
        ikx = tex[i + 1]
        iky = tey[i + 1]
        usx = tex[i + 2]
        usy = tey[i + 2]
        cizem.tara(ilk.taraid, brx, bry, ikx, iky, usx, usy)
    Next
    
Else
    ciz
Endif
    Return
    Catch
Message(Error.Text, Error.Where)
	ilk.hatayaz("bas " & Error.Text, Error.Where & "--" & Error.code)
End

Sub secend(xs1 As Float, ys1 As Float)

    Dim jetk As Float

    If snx = 0
        jetk = jet
        ava(xs1, ys1)
        If jetk = jet Then
            message(" Kapalı poligon değil", "tmm")

            Goto cik
        End If
    Else
        jetk = jet
        ava(snx, sny)
        If jetk = jet Then
            message(" Kapalı poligon değil", "tmm")
            Goto cik
        End If
    End If
    Goto atla
atla:
    Return
       Catch
	ilk.hatayaz("secend " & Error.Text, Error.Where & "--" & Error.code)
cik:
    ptType.Clear
    xpoints.Clear
    ypoints.Clear
    tex.Clear
    tey.Clear
    ilk.depo1.Clear
    ilk.dolas

End

Sub ava(xs As Float, ys As Float)

    For Each cazgi In ilk.cezmi
        If ilk.depo1.Exist(cazgi.id)
            If (cazgi.x1 = xs And cazgi.y1 = ys)
                If cazgi.komut = 1
                    xpoints.Add(cazgi.x1)
                    ypoints.Add(cazgi.y1)
                Else If cazgi.komut = 20
                    icle.bol(cazgi.teta, cazgi.r, cazgi.yaricap, cazgi.x1, cazgi.y1)
                End If
                snx = cazgi.x2
                sny = cazgi.y2
                jet = jet + 5
            End If
            If (cazgi.x2 = xs And cazgi.y2 = ys)
                If cazgi.komut = 1

                    xpoints.Add(cazgi.x2)
                    ypoints.Add(cazgi.y2)
                Else If cazgi.komut = 20
                    icle.bol(cazgi.teta, cazgi.r, cazgi.yaricap, cazgi.x1, cazgi.y1)
                End If
                snx = cazgi.x1
                sny = cazgi.y1
                jet = jet + 5
            End If
        End If
    Next
    Return
       Catch
	ilk.hatayaz("ava " & Error.Text, Error.Where & "--" & Error.code)
End

Sub altr(xs As Float, ys As Float)

    Dim t As Integer

    For t = 0 To ax1.Count - 1
        If (xs = ax1[t]) And (ys = ay1[t]) Then
            ikix = ax2[t]
            ikiy = ay2[t]
            xpoints.Add(ax2[t])
            ypoints.Add(ay2[t])
            ax1.Remove(t)
            ay1.Remove(t)
            ax2.Remove(t)
            ay2.Remove(t)
            jet = jet + 1
            Goto cik
        Else If (xs = ax2[t]) And (ys = ay2[t]) Then
            ikix = ax1[t]
            ikiy = ay1[t]
            xpoints.Add(ax1[t])
            ypoints.Add(ay1[t])
            ax1.Remove(t)
            ay1.Remove(t)
            ax2.Remove(t)
            ay2.Remove(t)
            jet = jet + 1
            Goto cik
        Endif
    Next
cik:
    Return
       Catch
	ilk.hatayaz("altr " & Error.Text, Error.Where & "--" & Error.code)
End

Public Sub classifyPoints()

    Dim i As Integer

    ptType.Clear
    polygonClockwise
    If earCounter = 0
        If ccw = False
            xpoints.Reverse
            ypoints.Reverse
            z1points.Reverse
            z2points.Reverse
        End If
    End If
    For i = 0 To (npoints - 2)
        If i = 0
            convex(xpoints[npoints - 2], ypoints[npoints - 2], xpoints[i], ypoints[i], xpoints[i + 1], ypoints[i + 1])
            If conbool = True Then
                ptType.Add(1, i)    ' Dışbükey
            Else
                ptType.Add(-1, i)          ' içbükey
                concaveCount = concaveCount + 1
            Endif
        Else
            convex(xpoints[i - 1], ypoints[i - 1], xpoints[i], ypoints[i], xpoints[i + 1], ypoints[i + 1])
            If conbool = True Then
                ptType.Add(1, i)         ' Dışbükey
            Else
                ptType.Add(-1, i)          ' içbükey
                concaveCount = concaveCount + 1
            Endif
        End If
    Next
    Return
       Catch
	ilk.hatayaz("classify " & Error.Text, Error.Where & "--" & Error.code)
End

Public Sub convex(x1 As Float, y1 As Float, x2 As Float, y2 As Float, x3 As Float, y3 As Float)

    area(x1, y1, x2, y2, x3, y3)
    If areasum < 0
        conbool = False
    Else
        conbool = True
    End If
    Return
       Catch
	ilk.hatayaz("convex " & Error.Text, Error.Where & "--" & Error.code)
End

Public Sub area(x1 As Float, y1 As Float, x2 As Float, y2 As Float, x3 As Float, y3 As Float)

    areasum = 0
    areasum = areasum + x1 * (y3 - y2)
    areasum = areasum + x2 * (y1 - y3)
    areasum = areasum + x3 * (y2 - y1)
    Return
       Catch
	ilk.hatayaz("area " & Error.Text, Error.Where & "--" & Error.code)
End

Public Sub polygonClockwise()

    Dim i As Integer
    Dim aa, bb, cc, b, c, theta As Float
    Dim convex_turn As Float
    Dim convex_sum As Float

    convex_sum = 0

    For i = 0 To (npoints - 3)
        aa = Hyp((xpoints[i + 2] - xpoints[i]), (ypoints[i + 2] + ypoints[i]))
        bb = Hyp((xpoints[i + 1] - xpoints[i]), (ypoints[i + 1] + ypoints[i]))
        cc = Hyp((xpoints[i + 2] - xpoints[i + 1]), (ypoints[i + 2] + ypoints[i + 1]))
        b = Sqr(bb)
        c = Sqr(cc)
        theta = ACos((bb + cc - aa) / ((2 * b * c) - 0.00001))
        convex(xpoints[i], ypoints[i], xpoints[i + 1], ypoints[i + 1], xpoints[i + 2], ypoints[i + 2])
        If conbool = True Then
            convex_turn = Pi - theta
            convex_sum = convex_sum + convex_turn
        Else
            convex_sum = convex_sum - (Pi - theta)
        End If
    Next
    If convex_sum < (Pi)
        ccw = False
    Else
        ccw = True
    End If
    Return
       Catch
	ilk.hatayaz("polygonClockwise " & Error.Text, Error.Where & "--" & Error.code)
End

Public Sub doCutEar()

    Dim i As Integer

    earHasBeenCut = False
    For i = 0 To (npoints - 2)
        If ptType[i] = 1 Then     ' convex uç
            If i = 0 Then
                ear(xpoints[npoints - 2], ypoints[npoints - 2], xpoints[0], ypoints[0], xpoints[1], ypoints[1])
                If earbool = True Then   ' kulak
                    cutEar(0)             ' kulağı kes
                    xpoints.Remove(0)
                    ypoints.Remove(0)
                    npoints = npoints - 1
                    earHasBeenCut = True     ' Kesim yapıldı
                    Goto cik
                End If
            Else
                ear(xpoints[i - 1], ypoints[i - 1], xpoints[i], ypoints[i], xpoints[i + 1], ypoints[i + 1])
                If earbool = True Then  ' kulak
                    cutEar(i)            ' kulağı kes
                    xpoints.Remove(i)
                    ypoints.Remove(i)
                    npoints = npoints - 1
                    earHasBeenCut = True    ' Kesim yapıldı
                    Goto cik
                End If
            End If
        End If
    Next
cik:
    Return
       Catch
	ilk.hatayaz("doCutEar " & Error.Text, Error.Where & "--" & Error.code)
End

Public Sub ear(x1 As Float, y1 As Float, x2 As Float, y2 As Float, x3 As Float, y3 As Float)

    If concaveCount > 0 Then
        triangleContainsPoint(x1, y1, x2, y2, x3, y3)
        If tribool = True Then   ' nokta var
            earbool = False      ' kulak değil
        Else
            earbool = True          ' kulak
        End If
    Else
        earbool = True
    End If
    Return
       Catch
	ilk.hatayaz("Ear " & Error.Text, Error.Where & "--" & Error.code)
End

Public Sub triangleContainsPoint(x1 As Float, y1 As Float, x2 As Float, y2 As Float, x3 As Float, y3 As Float)

    Dim i As Integer
    Dim area1, area2, area3 As Float
    Dim noPointInTriangle As Integer

    For i = 0 To (npoints - 2)
        If ptType[i] = -1
            If (((xpoints[i] <> x1) And (ypoints[i] <> y1)) Or ((xpoints[i] <> x2) And (ypoints[i] <> y2)) Or ((xpoints[i] <> x3) And (ypoints[i] <> y3)))
                area(x1, y1, x2, y2, xpoints[i], ypoints[i])
                area1 = areasum
                area(x2, y2, x3, y3, xpoints[i], ypoints[i])
                area2 = areasum
                area(x3, y3, x1, y1, xpoints[i], ypoints[i])
                area3 = areasum
                If (area1 > 0) And (area2 > 0) And (area3 > 0) Then noPointInTriangle = 1 ' Nokta var
                If (area1 < 0) And (area2 < 0) And (area3 < 0) Then noPointInTriangle = 1  ' Nokta var
            End If
        End If
    Next

    If noPointInTriangle = 1   ' Nokta varsa
        tribool = True             'var
    Else
        tribool = False              ' yok
    End If

    Return
       Catch
	ilk.hatayaz("doCutEar " & Error.Text, Error.Where & "--" & Error.code)
End

Public vcb As Integer
Public talax As Float

Public Sub ciz()

    Dim i, tn, hlv As Integer
    Dim abx, aex, afx As Float
    Dim aby, aey, afy As Float
    Dim brx, bry, ikx, iky, usx, usy As Float

    For i = 0 To (tex.Count - 9) Step 3
        hlv = hlv + 1
        tmk = tmk + 1
        brx = tex[i]
        bry = tey[i]
        ikx = tex[i + 1]
        iky = tey[i + 1]
        usx = tex[i + 2]
        usy = tey[i + 2]
        abx = Abs(brx + ikx) / 2
        aby = Abs(bry + iky) / 2
        aex = Abs(ikx + usx) / 2
        aey = Abs(iky + usy) / 2
        afx = Abs(brx + usx) / 2
        afy = Abs(bry + usy) / 2
        aln(tex[i], tey[i], tex[i + 1], tey[i + 1], tex[i + 2], tey[i + 2])
        talax = talax + alax
        tn = tn + 1
        cazgi = New Czm
        cazgi.id = dacy.kyno
        cazgi.komut = 238
        cazgi.x1 = brx / ilk.olcum
        cazgi.y1 = bry / ilk.olcum
        cazgi.x3 = ikx / ilk.olcum
        cazgi.y3 = iky / ilk.olcum
        cazgi.x8 = usx / ilk.olcum
        cazgi.y8 = usy / ilk.olcum
        cazgi.x4 = tmk
        cazgi.y4 = alax
        cazgi.renk = Color.White
        cazgi.blok = ilk.bolok
        cazgi.sekil = 1
        cazgi.kalinlik = 1
        cazgi.y6 = i + 2
        cazgi.z = zo
        cazgi.z1 = zi
        ilk.cezmi.Add(cazgi, dacy.kyno)
        dacy.kyno = dacy.kyno + 1
    Next
    Return
       Catch
	ilk.hatayaz("ciz " & Error.Text, Error.Where & "--" & Error.code)
End

Public alax As Float

Public Sub aln(x1 As Float, y1 As Float, x2 As Float, y2 As Float, x3 As Float, y3 As Float)

    alax = 0
    alax = x1 * (y3 - y2)
    alax = alax + x2 * (y1 - y3)
    alax = alax + x3 * (y2 - y1)
    alax = alax / 2
    Return
       Catch
	ilk.hatayaz("aln " & Error.Text, Error.Where & "--" & Error.code)
End

Public Sub cutEar(index As Integer)

    Dim ex As New Float[]
    Dim ey As New Float[]

    If index = 0
        ex.Add(xpoints[npoints - 2], 0)
        ey.Add(ypoints[npoints - 2], 0)
        ' ez1.Add(z1points[npoints - 2], 0)
        ' ez2.Add(z2points[npoints - 2], 0)
        ex.Add(xpoints[index], 1)
        ey.Add(ypoints[index], 1)
        ' ez1.Add(z1points[index], 1)
        ' ez2.Add(z2points[index], 1)
        ex.Add(xpoints[index + 1], 2)
        ey.Add(ypoints[index + 1], 2)
        ' ez1.Add(z1points[index + 1], 2)
        ' ez2.Add(z2points[index + 1], 2)

    Else If (index > 0) And (index < (npoints - 2))
        ex.Add(xpoints[index - 1], 0)
        ey.Add(ypoints[index - 1], 0)
        ' ez1.Add(z1points[index - 1], 0)
        ' ez2.Add(z2points[index - 1], 0)
        ex.Add(xpoints[index], 1)
        ey.Add(ypoints[index], 1)
        ' ez1.Add(z1points[index], 1)
        ' ez2.Add(z2points[index], 1)
        ex.Add(xpoints[index + 1], 2)
        ey.Add(ypoints[index + 1], 2)
        ' ez1.Add(z1points[index + 1], 2)
        ' ez2.Add(z2points[index + 1], 2)
    Else If index = (npoints - 2)
        ex.Add(xpoints[index - 1], 0)
        ey.Add(ypoints[index - 1], 0)
        ' ez1.Add(z1points[index - 1], 0)
        ' ez2.Add(z2points[index - 1], 0)
        ex.Add(xpoints[index], 1)
        ey.Add(ypoints[index], 1)
        ' ez1.Add(z1points[index], 1)
        ' ez2.Add(z2points[index], 1)
        ex.Add(xpoints[0], 2)
        ey.Add(ypoints[0], 2)
        ' ez1.Add(z1points[0], 2)
        ' ez2.Add(z2points[0], 2)
    End If
    tex.add(ex[0])
    tey.add(ey[0])
    ' tez1.Add(ez1[0])
    ' tez2.Add(ez2[0])
    tex.add(ex[1])
    tey.add(ey[1])
    ' tez1.Add(ez1[1])
    ' tez2.Add(ez2[1])
    tex.add(ex[2])
    tey.add(ey[2])
    ' tez1.Add(ez1[2])
    ' tez2.Add(ez2[2])

    nokx.Add((ex[0] + ex[1] + ex[2]) / 3)
    noky.Add((ey[0] + ey[1] + ey[2]) / 3)
    earCounter = earCounter + 1
    Return
       Catch
	ilk.hatayaz("CutEar " & Error.Text, Error.Where & "--" & Error.code)
End

Public Sub cizv()

    kesitli.fex = tex
    kesitli.fey = tey
    altust
    hesap
    hesap2
    Return
       Catch
	ilk.hatayaz("cizv " & Error.Text, Error.Where & "--" & Error.code)
End

Public xus As Float
Public xsa As Float
Public atelx As New Float[]

Public Sub altust()

    Dim i As Integer

    basy = 100000000000
    sony = -100000000000
    basx = 100000000000
    sonx = -100000000000
    For i = 0 To tey.Count - 1
        If tey[i] < basy Then basy = tey[i]
        If tey[i] > sony Then sony = tey[i]
    Next
    For i = 0 To tex.Count - 1
        If tex[i] < basx Then basx = tex[i]
        If tex[i] > sonx Then sonx = tex[i]
    Next
    Return
       Catch
	ilk.hatayaz("altust " & Error.Text, Error.Where & "--" & Error.code)
End

Sub hesap()

    Dim i As Integer
    Dim xmin, ymin, xmax, ymax, rx, ry, usy, asy, usx, asx As Float

    For i = 0 To tex.Count - 3 Step 3
        xmin = Min(ucg.tex[i], tex[i + 1])
        xmin = Min(xmin, tex[i + 2])
        xmax = Max(ucg.tex[i], tex[i + 1])
        xmax = Max(xmax, tex[i + 2])
        ymin = Min(ucg.tey[i], tey[i + 1])
        ymin = Min(ymin, tey[i + 2])
        ymax = Max(ucg.tey[i], tey[i + 1])
        ymax = Max(ymax, tey[i + 2])
        rx = Abs(Abs(xmin) - Abs(xmax))
        ry = Abs(Abs(ymin) - Abs(ymax))
        atel.Add(rx * ry ^ 3 / 36)
        atelx.Add(ry * rx ^ 3 / 36)
        aln(ucg.tex[i], tey[i], tex[i + 1], tey[i + 1], tex[i + 2], tey[i + 2])
        alan.Add(alax)
    Next
    kesitli.daire.Text = nokx.Count + 1
    For i = 0 To nokx.Count - 1
        usy = usy + (noky[i] * alan[i])
        asy = asy + alan[i]
    Next
    For i = 0 To nokx.Count - 1
        usx = usx + (nokx[i] * alan[i])
        asx = asx + alan[i]
    Next
    If asy <> 0 Then yus = usy / asy
    If asx <> 0 Then xus = usx / asx
    Return
       Catch
	ilk.hatayaz("hesap " & Error.Text, Error.Where & "--" & Error.code)
End

Sub hesap2()

    Dim i As Integer
    Dim r1, usy, asy, usx, asx, alana As Float

    For i = 0 To nokx.Count - 1
        r1 = Abs(Abs(noky[i]) - Abs(yus))
        ysa = ysa + atel[i] + r1 ^ 2 * alan[i]
    Next
    For i = 0 To nokx.Count - 1
        r1 = Abs(Abs(nokx[i]) - Abs(xus))
        xsa = xsa + atelx[i] + r1 ^ 2 * alan[i]
    Next

    For i = 0 To nokx.Count - 1
        alana = alana + alan[i]
    Next
    mukavemetli.alana.Text = Round(alana / 100, -2)
    mukavemetli.atalet.Text = Round(ysa / 10000, -4)
    mukavemetli.iyy.Text = Round(xsa / 10000, -4)
    kesitli.alan.Text = Round(alana / 100, -2)
    kesitli.atalet.Text = Round(ysa / 10000, -4)
    kesitli.iyy.Text = Round(xsa / 10000, -4)
    usy = Abs(Abs(basy) - Abs(yus))
    asy = Abs(Abs(sony) - Abs(yus))
    usx = Abs(Abs(basx) - Abs(xus))
    asx = Abs(Abs(sonx) - Abs(xus))

    If usy > asy
        r2 = ysa / usy
        mukavemetli.a.Text = Round(usy / 10, -3)
        kesitli.a.Text = Round(usy / 10, -3)
    Else
        r2 = ysa / asy
        mukavemetli.a.Text = Round(asy / 10, -3)
        kesitli.a.Text = Round(asy / 10, -3)
    End If
    mukavemetli.mukavemet.Text = Round(r2 / 1000, -3)
    kesitli.mukavemet.Text = Round(r2 / 1000, -3)
    If usx > asx
        r2 = xsa / usx
        mukavemetli.b.Text = Round(usx / 10, -3)
        kesitli.b.Text = Round(usx / 10, -3)
    Else
        r2 = xsa / asx
        mukavemetli.b.Text = Round(asx / 10, -3)
        kesitli.b.Text = Round(asx / 10, -3)
    End If
    ilk.calanilk.Refresh
    Return
       Catch
	ilk.hatayaz("hesap2 " & Error.Text, Error.Where & "--" & Error.code)
End

Public Sub ekle()

    If kesitli.ListBox1.Find(ilk.idgec) = -1
        kesitli.ListBox1.Add(ilk.idgec)
    End If
    Return

End
